import axios from "axios";
import dotenv from 'dotenv';
dotenv.config(); // –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã –∏–∑ —Ñ–∞–π–ª–∞ .env –∏ –∏—Ö –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ–±—ä–µ–∫—Ç process.env –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Node.js


// –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø—ã –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∏ –æ—à–∏–±–æ–∫ Telegram API
interface TelegramResponse {
  data: {
    ok: boolean;
    result?: any;
    description?: string;
  };
}

export const telegramSendMessage = async (
  phone: string,
  telegramToken: string,
  telegramChatId: string
) => {
  try {
    const text = `üìû <b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å</b>\n–¢–µ–ª–µ—Ñ–æ–Ω: <code>${phone}</code>\n–î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}`;
    const response: TelegramResponse = await axios.post(
      `https://api.telegram.org/bot${telegramToken}/sendMessage`,
      {
        chat_id: telegramChatId,
        text: text,
        parse_mode: 'HTML'
      }
    )

    if (!response.data.ok) {
      throw new Error(`Telegram API error: ${response.data.description}`);
    }
  } catch (error) {
    console.error('Telegram sendMessage error:', error instanceof Error ? error.message : error);
    throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Ä–æ—É—Ç–µ—Ä–µ
  }
};